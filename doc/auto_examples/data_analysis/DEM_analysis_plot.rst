
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/data_analysis/DEM_analysis_plot.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_data_analysis_DEM_analysis_plot.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_data_analysis_DEM_analysis_plot.py:


============
DEM analysis
============

Analyzing DEMs to extract average orientation, wavelength and amplitude of the dune pattern.

.. GENERATED FROM PYTHON SOURCE LINES 8-85



.. image:: /auto_examples/data_analysis/images/sphx_glr_DEM_analysis_plot_001.png
    :alt: DEM analysis plot
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Deep_Sea_Station orientation: 85.5 deg., wavelength: 2.6 km, amplitude: 45.6 m
    South_Namib_Station orientation: 124.3 deg., wavelength: 2.3 km, amplitude: 18.5 m






|

.. code-block:: default



    import numpy as np
    import os
    import matplotlib.pyplot as plt
    from geopy import distance
    import sys
    sys.path.append('../../')
    from python_codes.general import cosd, sind
    from python_codes.DEM_analysis import polyfit2d, periodicity_2d
    import python_codes.theme as theme
    theme.load_style()


    def DEM_analysis(file):
        data = np.load(file, allow_pickle=True).item()
        # Removing large scale topo
        kx, ky = 2, 2
        LON, LAT = np.meshgrid(data['lon'], data['lat'])
        soln, residuals, rank, s = polyfit2d(LON, LAT, data['DEM'], kx=kx, ky=ky, order_max=2)
        fitted_surf = np.polynomial.polynomial.polyval2d(LON, LAT, soln.reshape((kx + 1, ky + 1)).T)
        # Calculating average conversion deg -> km
        x_km = np.array([distance.distance((data['lat'][0], i), (data['lat'][0], data['lon'][0]), ellipsoid='WGS-84').km for i in data['lon']])
        y_km = np.array([distance.distance((i, data['lon'][0]), (data['lat'][0], data['lon'][0]), ellipsoid='WGS-84').km for i in data['lat']])
        km_step = np.mean([np.diff(x_km).mean(), np.diff(y_km).mean()])
        return *periodicity_2d(data['DEM'] - fitted_surf, 40), data['DEM'] - fitted_surf, data['lon'], data['lat'], km_step


    Stations = ['Deep_Sea_Station', 'South_Namib_Station']
    #
    # Paths
    path_savefig = '../../static/output_data/figures/'
    path_outputdata = '../../static/output_data/data/'
    path_inputdata = '../../static/input_data/'
    #
    for i, station in enumerate(Stations):
        file = os.path.join(path_inputdata, station, 'DEM_' + station + '.npy')
        orientation, wavelength, amplitude, p0, p1, transect, C, topo, lon, lat, km_step = DEM_analysis(file)
        fig_width = theme.fig_width
        fig_height = 0.6*fig_width
        fig = plt.figure(figsize=(fig_width, fig_height), tight_layout=True)
        #
        plt.subplot(2, 2, 1)
        plt.contourf(lon, lat, topo, levels=50)
        plt.colorbar(label='$h$~[m]')
        plt.xlabel(r'longitude [$^{\circ}$]')
        plt.ylabel(r'latitude [$^{\circ}$]')
        plt.gca().set_aspect('equal')
        #
        plt.subplot(2, 2, 2)
        x = list(-(lon - lon[0])[::-1]) + list((lon - lon[0])[1:])
        y = list(-(lat - lat[0])[::-1]) + list((lat - lat[0])[1:])
        plt.contourf(x, y, C, levels=50)
        #
        plt.plot([x[p0[0]], x[int(round(p1[0]))]], [y[p0[1]], y[int(round(p1[1]))]], color='tab:red', label='profile for wavelength calculation')
        p11 = p0 + np.array([cosd(orientation), sind(orientation)])*min(topo.shape)
        p12 = p0 - np.array([cosd(orientation), sind(orientation)])*min(topo.shape)
        plt.plot([x[int(round(p11[0]))], x[int(round(p12[0]))]], [y[int(round(p11[1]))], y[int(round(p12[1]))]], color='k', label='orientation')
        plt.xlabel(r'longitude -- shift [$^{\circ}$]')
        plt.ylabel(r'latitude -- shift [$^{\circ}$]')
        # plt.legend()
        plt.gca().set_aspect('equal')
        #
        plt.subplot(2, 1, 2)
        x_transect = np.arange(transect.size)*km_step
        plt.plot(x_transect, transect, color='tab:red')
        plt.plot(x_transect[wavelength], transect[wavelength], color='tab:blue', marker='.')
        plt.xlabel('Distance along profile [km]')
        plt.ylabel('Autocorrelation~[m$^{2}$]')
        plt.xlim(0, x_transect.max())
        plt.savefig(os.path.join(path_savefig, 'Analysis_DEM_' + station + '.pdf'))
        np.save(os.path.join(path_outputdata, 'Analysis_DEM_' + station + '.npy'), {'orientation': orientation, 'wavelength': x_transect[wavelength], 'amplitude': amplitude})
        print(station, r'orientation: ' + '{:.1f}'.format(orientation) + r' deg., wavelength: ' + r'{:.1f}'.format(x_transect[wavelength]) + r' km, amplitude: ' + r'{:.1f}'.format(amplitude) + r' m')
        if i == 1:
            plt.show()
        else:
            plt.close()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.589 seconds)


.. _sphx_glr_download_auto_examples_data_analysis_DEM_analysis_plot.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: DEM_analysis_plot.py <DEM_analysis_plot.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: DEM_analysis_plot.ipynb <DEM_analysis_plot.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
