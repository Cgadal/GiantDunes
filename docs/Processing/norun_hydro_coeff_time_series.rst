
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "Processing/norun_hydro_coeff_time_series.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_Processing_norun_hydro_coeff_time_series.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_Processing_norun_hydro_coeff_time_series.py:


============================================
Time series of the hydrodyanmic coefficients
============================================

Here, we calculate the time series of the hydrodynamic coefficients from the time series of the non dimensional parameters extracted from the meteorological and elevation data.

Note that this script takes a certain amount of times to run, and as such is not run during the building of this documentation.

.. GENERATED FROM PYTHON SOURCE LINES 10-52


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/gadal/Documents/Work/Research/DUNE/PhD_Parts/Part5_Winds/Giant_dune_retroaction_regional_wind_regime/Processing/norun_hydro_coeff_time_series.py", line 31, in <module>
        k = np.concatenate([np.zeros(Data[station]['Froude'].shape) + 2*np.pi/(Data_pattern[station]['wavelength']*1e3) for station in Stations])  # vector of wavelength [m]
      File "/home/gadal/Documents/Work/Research/DUNE/PhD_Parts/Part5_Winds/Giant_dune_retroaction_regional_wind_regime/Processing/norun_hydro_coeff_time_series.py", line 31, in <listcomp>
        k = np.concatenate([np.zeros(Data[station]['Froude'].shape) + 2*np.pi/(Data_pattern[station]['wavelength']*1e3) for station in Stations])  # vector of wavelength [m]
    KeyError: 'Froude'






|

.. code-block:: default


    import numpy as np
    import os
    import sys
    sys.path.append('../')
    from python_codes.linear_theory import calculate_solution

    # Paths
    path_outputdata = '../static/output_data/data/'

    # Importing non-dimensional numbers calculated
    Data = np.load(os.path.join(path_outputdata, 'Data_final.npy'), allow_pickle=True).item()
    Stations = ['South_Namib_Station', 'Deep_Sea_Station']

    # ##### Loading pattern characteristics
    Data_pattern = {}
    for station in ['Deep_Sea_Station', 'South_Namib_Station']:
        Data_pattern[station] = np.load(os.path.join(path_outputdata, 'Analysis_DEM_' + station + '.npy'), allow_pickle=True).item()

    # Parameters
    Kappa = 0.4  # Von Kàrmàn constant
    k = np.concatenate([np.zeros(Data[station]['Froude'].shape) + 2*np.pi/(Data_pattern[station]['wavelength']*1e3) for station in Stations])  # vector of wavelength [m]
    z0 = 1e-3  # hydrodynamic roughness, [m]
    eta_0_vals = k*1e-3
    eta = 0  # non dimensional position where to calculate the solution (bottom)

    hydro_Coeffs = {}
    for station in Stations:
        hydro_Coeffs[station] = np.zeros((2, Data[station]['kH'].size))
        k = 2*np.pi/(Data_pattern[station]['wavelength']*1e3)
        #
        for i, (eta_0, eta_H, Froude, eta_B) in enumerate(zip(eta_0_vals, Data[station]['kH'], Data[station]['Froude'], Data[station]['kLB'])):
            max_z = 0.9999*eta_H
            if not np.isnan([eta_H, Froude, eta_B]).any():
                Sol = calculate_solution(eta, eta_H, eta_0, eta_B, Froude, max_z, Kappa=0.4)
                #
                Ax, Bx = np.real(Sol[2]), np.imag(Sol[2])
            else:
                Ax, Bx = np.nan, np.nan
            hydro_Coeffs[station][:, i] = [Ax, Bx]
    #
    np.save(os.path.join(path_outputdata, 'time_series_hydro_coeffs.npy'), hydro_Coeffs)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.045 seconds)


.. _sphx_glr_download_Processing_norun_hydro_coeff_time_series.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: norun_hydro_coeff_time_series.py <norun_hydro_coeff_time_series.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: norun_hydro_coeff_time_series.ipynb <norun_hydro_coeff_time_series.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
